============================= test session starts ==============================
platform darwin -- Python 3.8.10, pytest-7.3.2, pluggy-1.0.0
rootdir: /Users/emartinez/projects/calculator-backend/tests
collected 1 item

test_api.py F                                                            [100%]

=================================== FAILURES ===================================
_____________________________ test_get_operations ______________________________

self = <chalice.local.LocalGateway object at 0x106bd5c40>, method = 'GET'
path = '/v1/operations', headers = {'Authorization': 'Allow'}, body = ''

    def handle_request(self,
                       method: str,
                       path: str,
                       headers: HeaderType,
                       body: Optional[bytes]) -> ResponseType:
        lambda_context = self._generate_lambda_context()
        try:
>           lambda_event = self._generate_lambda_event(
                method, path, headers, body)

../../../.pyenv/versions/calc/lib/python3.8/site-packages/chalice/local.py:495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chalice.local.LocalGateway object at 0x106bd5c40>, method = 'GET'
path = '/v1/operations', headers = {'Authorization': 'Allow'}, body = ''

    def _generate_lambda_event(self,
                               method: str,
                               path: str,
                               headers: HeaderType,
                               body: Optional[bytes]) -> EventType:
>       lambda_event = self.event_converter.create_lambda_event(
            method=method, path=path, headers=headers,
            body=body,
        )

../../../.pyenv/versions/calc/lib/python3.8/site-packages/chalice/local.py:477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chalice.local.LambdaEventConverter object at 0x106c0aca0>
method = 'GET', path = '/v1/operations', headers = {'Authorization': 'Allow'}
body = ''

    def create_lambda_event(self,
                            method: str,
                            path: str,
                            headers: Dict[str, str],
                            body: Optional[bytes] = None) -> EventType:
>       view_route = self._route_matcher.match_route(path)

../../../.pyenv/versions/calc/lib/python3.8/site-packages/chalice/local.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chalice.local.RouteMatcher object at 0x106c0ac40>
url = '/v1/operations'

    def match_route(self, url: str) -> MatchResult:
        """Match the url against known routes.
    
        This method takes a concrete route "/foo/bar", and
        matches it against a set of routes.  These routes can
        use param substitution corresponding to API gateway patterns.
        For example::
    
            match_route('/foo/bar') -> '/foo/{name}'
    
        """
        # Otherwise we need to check for param substitution
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query, keep_blank_values=True)
        path = parsed_url.path
        # API Gateway removes the trailing slash if the route is not the root
        # path. We do the same here so our route matching works the same way.
        if path != '/' and path.endswith('/'):
            path = path[:-1]
        parts = path.split('/')
        captured = {}
        for route_url in self.route_urls:
            url_parts = route_url.split('/')
            if len(parts) == len(url_parts):
                for i, j in zip(parts, url_parts):
                    if j.startswith('{') and j.endswith('}'):
                        captured[j[1:-1]] = i
                        continue
                    if i != j:
                        break
                else:
                    return MatchResult(route_url, captured, query_params)
>       raise ValueError("No matching route found for: %s" % url)
E       ValueError: No matching route found for: /v1/operations

../../../.pyenv/versions/calc/lib/python3.8/site-packages/chalice/local.py:154: ValueError

During handling of the above exception, another exception occurred:

chalice_client = <chalice.local.LocalGateway object at 0x106bd5c40>

    def test_get_operations(chalice_client):
        headers = {'Authorization': 'Allow'}
>       response = chalice_client.handle_request(method='GET', path='/v1/operations', headers=headers, body='')

test_api.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chalice.local.LocalGateway object at 0x106bd5c40>, method = 'GET'
path = '/v1/operations', headers = {'Authorization': 'Allow'}, body = ''

    def handle_request(self,
                       method: str,
                       path: str,
                       headers: HeaderType,
                       body: Optional[bytes]) -> ResponseType:
        lambda_context = self._generate_lambda_context()
        try:
            lambda_event = self._generate_lambda_event(
                method, path, headers, body)
        except ValueError:
            # API Gateway will return a different error on route not found
            # depending on whether or not we have an authorization token in our
            # request. Since we do not do that check until we actually find
            # the authorizer that we will call we do not have that information
            # available at this point. Instead we just check to see if that
            # header is present and change our response if it is. This will
            # need to be refactored later if we decide to more closely mirror
            # how API Gateway does their auth and routing.
            error_headers = {'x-amzn-RequestId': lambda_context.aws_request_id,
                             'x-amzn-ErrorType': 'UnauthorizedException'}
            auth_header = headers.get('authorization')
            if auth_header is None:
                auth_header = headers.get('Authorization')
            if auth_header is not None:
>               raise ForbiddenError(
                    error_headers,
                    (b'{"message": "Authorization header requires '
                     b'\'Credential\''
                     b' parameter. Authorization header requires \'Signature\''
                     b' parameter. Authorization header requires '
                     b'\'SignedHeaders\' parameter. Authorization header '
                     b'requires existence of either a \'X-Amz-Date\' or a'
                     b' \'Date\' header. Authorization=%s"}'
                     % auth_header.encode('ascii')))
E               chalice.local.ForbiddenError: ({'x-amzn-RequestId': 'fb2d3ed0-6dbd-43ca-b4e9-cdb2ac3bb46d', 'x-amzn-ErrorType': 'UnauthorizedException'}, b'{"message": "Authorization header requires \'Credential\' parameter. Authorization header requires \'Signature\' parameter. Authorization header requires \'SignedHeaders\' parameter. Authorization header requires existence of either a \'X-Amz-Date\' or a \'Date\' header. Authorization=Allow"}')

../../../.pyenv/versions/calc/lib/python3.8/site-packages/chalice/local.py:512: ForbiddenError
=========================== short test summary info ============================
FAILED test_api.py::test_get_operations - chalice.local.ForbiddenError: ({'x-...
============================== 1 failed in 1.22s ===============================
